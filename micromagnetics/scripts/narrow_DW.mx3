// NUMERICAL PARAMETERS
fmax := 0.1e9    // maximum frequency (in Hz) of the sinc pulse
T_tot := 400e-9  // simulation time (longer -> better frequency resolution)
del_t := 250e-12 // the sample time

// Racetrack crystal settings:
length := 200e-9
width := 20e-9
delta := 30e-9
lattice_constant := 60e-9
N_unitcells := 8
Nx := 100
Ny := 256
Nz := 1
Lx := length
Ly := N_unitcells * lattice_constant
dX := length / Nx
dY := Ly / Ny
dZ := 3e-9 / Nz

setGridSize(Nx, Ny, Nz)
setCellSize(dX, dY, dZ)

// Material Constants
Bz := 0.01
Msat = 1273e3
Aex = 10e-12
anisU = vector(0, 0, 1)
Ku1 = 1.5e6
alpha = 0
Xi = 0.2
demagAccuracy = 8
pinning := false
AFM := true

two_racetrack := rect(length, delta+width)
racetrack := rect(length, width)

gap := delta - width

singleR := racetrack.repeat(0, lattice_constant, 0).transl(0, width/2, 0)
twoR := singleR.add(singleR.transl(0, delta, 0))

if AFM {
	setgeom(twoR)

	// Define regions
	defRegion(2, singleR.transl(0, delta, 0))
	save(regions)

	m.setRegion(2, twoDomain(0, 0, -1, 1, 1, 0, 0, 0, 1))
} else {
	setgeom(singleR)
}

// Define regions
defRegion(1, singleR)
defRegion(3, racetrack.transl(0, -Ly/2+width/2, 0))
save(regions)

B_ext.setregion(3, vector(0, 0, Bz*sinc(2*pi*fmax*(t-T_tot/2))))

m.setRegion(1, twoDomain(0, 0, 1, 1, 1, 0, 0, 0, -1))
m.setRegion(3, twoDomain(0, 0, 1, 1, 1, 0, 0, 0, -1))

setPBC(0, 2, 0)
relax()

// Schedule output & save results
autosave(m, del_t)
tableadd(e_total)
tableautosave(del_t)

// Run for 1ns with current through the sample
temp.set(1)
j = vector(0, 0, 0)
pol = 1
run(T_tot)